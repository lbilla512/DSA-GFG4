package com.example.demo;

import java.util.stream.IntStream;

public class GCD {

	// optimized solution
	static int findGCD(int firstNumber, int secondNumber) {
		int divisor = (firstNumber > secondNumber)?secondNumber:firstNumber;
		int value = (firstNumber > secondNumber)?firstNumber:secondNumber;
		while(divisor > 0) {	
			int interValue = value % divisor;
			//System.out.println("inter value "+interValue);
			if(interValue == 0) return divisor;
			 divisor = interValue;
			// value = (firstNumber > secondNumber)?firstNumber:secondNumber;
			
		}
		return 1;
		
	} 
	
	// streams 1...min of 2 numbers.. O(min(n,m))
	static int findGCD_streams(int firstNumber, int secondNumber) {
		int result = IntStream.rangeClosed(1, Math.min(firstNumber, secondNumber))
		.filter(i -> firstNumber % i == 0 && secondNumber % i ==0)
		.max()
		.getAsInt();
		return result;
		
	} 
	
	public static void main(String[] args) {
		System.out.println(findGCD(4,6));
		System.out.println(findGCD(100,200));
		System.out.println(findGCD(7,13));
		
		System.out.println(findGCD_streams(4,6));
		System.out.println(findGCD_streams(100,200));
		System.out.println(findGCD_streams(7,13));
	}
	
}
